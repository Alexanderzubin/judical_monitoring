from telebot import TeleBot
from app.database.repositories.user import UserRepository
from app.database.repositories.subscription import SubscriptionRepository
from app.database.repositories.case import CaseRepository
from app.database.session import Session

from app.bot.keyboards import main_menu, cases_menu, cancel_menu
from app.bot.utils import is_valid_url

import logging

logger = logging.getLogger("bot")
logger.setLevel(logging.INFO)

session = Session()

repo_user = UserRepository(session=session, logger=logger)
repo_case = CaseRepository(session=session, logger=logger)
repo_subscription = SubscriptionRepository(session=session, logger=logger)


def setup_handlers(bot: TeleBot):
	@bot.message_handler(commands=['start'])

	def send_welcome(message):
		try:
			tg_id = message.from_user.id
			user = repo_user.get_by_tg_id(tg_id=tg_id)
			if user:
				welcome_text = (
					f"<b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
					"<i>–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞!</i> –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Å—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞. "
					"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
				)
				bot.send_message(message.chat.id, welcome_text, parse_mode='HTML', reply_markup=main_menu())
			else:
				repo_user.create(
					tg_id=tg_id,
					first_name=message.from_user.first_name,
					last_name=message.from_user.last_name,
					username=message.from_user.username,
					chat_id=message.chat.id
				)
				welcome_text = (
					f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!</b>\n\n"
					"<i>–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª.</i> "
					"–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –¥–µ–ª–∞, —Å–ª–µ–¥–∏ –∑–∞ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ —É–ø—Ä–∞–≤–ª—è–π –ø–æ–¥–ø–∏—Å–∫–∞–º–∏. "
					"–ù–∞—á–Ω—ë–º? –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:"
				)
				bot.send_message(message.chat.id, welcome_text, parse_mode='HTML', reply_markup=main_menu())
		except Exception as e:
			logger.error(f'–û—à–∏–±–∫–∞ –≤ send_welcome: {e}')
			bot.send_message(
				message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
				parse_mode='HTML'
			)

	@bot.message_handler(func=lambda message: message.text == '‚ùì –ü–æ–º–æ—â—å')
	def help_command(message):
		help_text = (
			"<b>üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
			"1. <b>–ú–æ–∏ –¥–µ–ª–∞</b> ‚Äî —Ä–∞–±–æ—Ç–∞ —Å —Å—É–¥–µ–±–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏:\n"
			"   - <i>–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–µ–ª–æ</i>: –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–µ–ª–æ.\n"
			"   - <i>–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –¥–µ–ª</i>: –ü–æ—Å–º–æ—Ç—Ä–∏ –≤—Å–µ –¥–µ–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω.\n"
			"   - <i>–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –¥–µ–ª–∞</i>: –£–¥–∞–ª–∏ –¥–µ–ª–æ –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫.\n\n"
			"2. <b>–û –±–æ—Ç–µ</b> ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
			"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏ –≤ <a href='https://t.me/YourSupport'>–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>"
		)
		bot.reply_to(message, help_text, parse_mode='HTML', reply_markup=main_menu())

	@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –û –±–æ—Ç–µ')
	def about_command(message):
		about_text = (
			"<b>–û –±–æ—Ç–µ:</b>\n\n"
			"–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª. –ü–æ–º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –¥–µ–ª –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º.\n\n"
			"<b>–í–µ—Ä—Å–∏—è:</b> 1.0"
		)
		bot.reply_to(message, about_text, parse_mode='HTML', reply_markup=main_menu())

	@bot.message_handler(func=lambda message: message.text == 'üìã –ú–æ–∏ –¥–µ–ª–∞')
	def my_cases(message):
		bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=cases_menu())

	@bot.message_handler(func=lambda message: message.text == 'üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–µ–ª–æ')
	def subscribe_to_case(message):
		bot.reply_to(
			message, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–µ–ª–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.\n\n"
					 "üîó –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http –∏–ª–∏ https –∏ "
					 ""
					 "–≤–µ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å—É–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://sudrf.ru/...)\n\n"
					 "‚ùå –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>.",
			parse_mode='HTML',
			reply_markup=cancel_menu()
		)

		bot.register_next_step_handler(message, wait_for_case_link)

	def wait_for_case_link(message):
		if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
			bot.send_message(
				message.chat.id,
				"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–µ–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
				reply_markup=cases_menu()
			)
			return
		url = message.text
		url_valid = is_valid_url(message.text)
		if not url_valid:
			bot.reply_to(message, "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
			bot.register_next_step_handler(message, wait_for_case_link)
			return
		try:

			case = repo_case.get_by_url(url)
			if case:
				user_id = repo_user.get_by_tg_id(message.chat.id)
				existing_subscription = repo_subscription.get_by_user_and_case(user_id.id, case.id)
				if existing_subscription:
					bot.send_message(
						message.chat.id,
						"üîî –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –¥–µ–ª–æ.",
						reply_markup=cases_menu()
					)
					return
			else:
				bot.send_message(message.chat.id, '–¥–µ–ª–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–¥', reply_markup=cases_menu())
		except Exception as e:
			logger.error('–î–µ–ª–æ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–¥ {e}')
			bot.send_message(
				message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
				parse_mode='HTML'
			)

	# –õ–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞ –≤ –±–¥

	@bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
	def back_to_main(message):
		bot.delete_message(message.chat.id, message.message_id)
		bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
