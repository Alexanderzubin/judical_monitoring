from telebot import TeleBot
from telebot.types import Message, CallbackQuery

from app.bot.keyboards import cases_menu, generate_paginated_case_buttons
from app.bot.type import Repos

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
pagination_state = {}


def register_list_cases(bot: TeleBot, repos: Repos, logger):
	# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –¥–µ–ª"
	@bot.message_handler(func=lambda message: message.text == 'üìë –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –¥–µ–ª')
	def my_list_cases(message: Message):
		user = repos['user'].get_by_tg_id(message.chat.id)
		user_subs = repos['subscription'].get_user_subscriptions(user.id)

		if not user_subs:
			bot.send_message(message.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫', reply_markup=cases_menu())
			return

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
		pagination_state[message.chat.id] = {
			'current_page': 0,
			'subscriptions': user_subs
		}

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
		bot.send_message(
			message.chat.id,
			'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
			reply_markup=generate_paginated_case_buttons(user_subs, 'list', 0)
		)

	# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–µ–ª–∞ –ø–æ callback
	@bot.callback_query_handler(func=lambda call: call.data.startswith('list_case_'))
	def open_case_details(call: CallbackQuery):
		try:
			sub_id = int(call.data.split('_')[-1])
			subscription = repos['subscription'].get_by_id(sub_id)
			case = repos['case'].get_by_id(subscription.case_id)

			case_text = (
				f"<b>üìÑ –ù–æ–º–µ—Ä –¥–µ–ª–∞:</b> <code>{case.number}</code>\n"
				f"<b>üèõ –°—É–¥:</b> {case.court.name if case.court else '<i>–ù–µ —É–∫–∞–∑–∞–Ω</i>'}\n"
				f"<b>üë®‚Äç‚öñ –°—É–¥—å—è:</b> {case.judge.name if case.judge else '<i>–ù–µ —É–∫–∞–∑–∞–Ω</i>'}\n"
				f"<b>üìÖ –î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:</b> <code>{case.date_of_receipt.strftime('%d.%m.%Y')}</code>\n\n"
				f"<a href='{case.url}'>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ–ª–æ</a>"
			)

			# –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –¥–µ–ª–∞
			bot.edit_message_text(
				chat_id=call.message.chat.id,
				message_id=call.message.message_id,
				text=case_text,
				parse_mode='HTML'
			)
			bot.answer_callback_query(call.id)

		except Exception as e:
			logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–µ–ª–∞: {e}')
			bot.answer_callback_query(call.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–µ–ª–∞')

	# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	@bot.callback_query_handler(func=lambda call: call.data.startswith('list_page_'))
	def handle_pagination(call: CallbackQuery):
		try:
			page = int(call.data.split('_')[-1])
			state = pagination_state.get(call.message.chat.id)

			if not state:
				bot.answer_callback_query(call.id, '‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
				return

			state['current_page'] = page
			markup = generate_paginated_case_buttons(state['subscriptions'], 'list', page)

			# –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
			bot.edit_message_reply_markup(
				chat_id=call.message.chat.id,
				message_id=call.message.message_id,
				reply_markup=markup
			)
			bot.answer_callback_query(call.id)

		except Exception as e:
			logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}')
			bot.answer_callback_query(call.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É')
