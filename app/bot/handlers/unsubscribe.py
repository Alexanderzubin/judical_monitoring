import logging

from telebot.types import CallbackQuery, Message

from app.bot import bot
from app.bot.constants import SUBSCRIPTIONS_PER_PAGE
from app.bot.keyboards import generate_paginated_case_buttons, cases_menu
from app.database.session import Session
from app.services.subscriptions import SubscriptionService
from app.services.users import UserService

logger = logging.getLogger(__name__)


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
_pagination_state = {}


@bot.message_handler(func=lambda message: message.text == 'üóëÔ∏è –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –¥–µ–ª–∞')
def unsubscribe_from_cases(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø–∏—Å–∫—É –æ—Ç –¥–µ–ª–∞.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–ª, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.
    """
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    current_page = 0

    with Session() as session:
        try:
            user_service = UserService.get_service(session)
            user = user_service.find_user_by_telegram_id(message.chat.id)

            subscription_service = SubscriptionService.get_service(session)
            total_subscriptions_count = subscription_service.get_user_subscriptions_count(user)
            if not total_subscriptions_count:
                bot.send_message(message.chat.id, '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫')
                return

            user_subscriptions = subscription_service.get_user_subscriptions(
                user,
                limit=SUBSCRIPTIONS_PER_PAGE,
                offset=current_page,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            _pagination_state[message.chat.id] = {'current_page': 0}

            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ª–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:',
                reply_markup=generate_paginated_case_buttons(
                    user_subscriptions,
                    prefix='unsubscribe',
                    page_number=current_page,
                    items_per_page=SUBSCRIPTIONS_PER_PAGE,
                    total_subscriptions_count=total_subscriptions_count,
                ),
            )

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}')
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–¥–ø–∏—Å–æ–∫')


@bot.callback_query_handler(func=lambda call: call.data.startswith('unsubscribe_case_'))
def unsubscribe_callback(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø–∏—Å–∫—É –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–ª–∞.
    """
    subscription_id = int(call.data.split('_')[-1])

    with Session() as session:
        try:
            user_service = UserService.get_service(session)
            user = user_service.find_user_by_telegram_id(call.message.chat.id)

            subscription_service = SubscriptionService.get_service(session)
            subscription = subscription_service.find_subscription_by_id(subscription_id)
            case = subscription.case

            subscription_service.unsubscribe_user(user, case)
            bot.send_message(
                chat_id=call.message.chat.id,
                parse_mode='HTML',
                text=f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –¥–µ–ª–∞: <a href="{case.url}">{case.number}</a>',
            )
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {e}')
            bot.answer_callback_query(call.id, text='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ')


@bot.callback_query_handler(func=lambda call: call.data.startswith('unsubscribe_page_'))
def handle_unsubscribe_pagination(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–µ–ª.
    """
    with Session() as session:
        try:
            current_page = int(call.data.split('_')[-1])

            user_service = UserService.get_service(session)
            user = user_service.find_user_by_telegram_id(call.message.chat.id)

            subscription_service = SubscriptionService.get_service(session)

            user_subscriptions = subscription_service.get_user_subscriptions(
                user,
                limit=SUBSCRIPTIONS_PER_PAGE,
                offset=current_page,
            )
            total_subscriptions_count = subscription_service.get_user_subscriptions_count(user)

            state = _pagination_state.get(call.message.chat.id)

            if not state:
                bot.answer_callback_query(call.id, '‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
                return

            state['current_page'] = current_page

            markup = generate_paginated_case_buttons(
                subscriptions_page=user_subscriptions,
                prefix='unsubscribe',
                page_number=current_page,
                items_per_page=SUBSCRIPTIONS_PER_PAGE,
                total_subscriptions_count=total_subscriptions_count,
            )

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ª–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:',
                reply_markup=markup,
            )
            bot.answer_callback_query(call.id)

        except Exception as exc:
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏', exc_info=exc)
            bot.answer_callback_query(call.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É')
