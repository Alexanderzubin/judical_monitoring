from app.bot.keyboards import generate_paginated_case_buttons, cases_menu
from telebot.types import CallbackQuery, Message


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
pagination_state = {}

def register_unsubscribe(bot, repos, logger):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ—Ç–ø–∏—Å–∫–æ–π –æ—Ç –¥–µ–ª.
    –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """

    @bot.message_handler(func=lambda message: message.text == 'üóëÔ∏è –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –¥–µ–ª–∞')
    def unsubscribe_case(message: Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø–∏—Å–∫—É –æ—Ç –¥–µ–ª–∞.
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–ª, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.
        """
        user = repos['user'].get_by_tg_id(message.chat.id)
        user_subscription = repos['subscription'].get_user_subscriptions(user.id)

        try:
            if not user_subscription:
                bot.send_message(message.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫')
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_state[message.chat.id] = {'current_page': 0, 'subscriptions': user_subscription}

            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ª–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:',
                reply_markup=generate_paginated_case_buttons(user_subscription, 'unsubscribe', 0)
            )

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}')
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–¥–ø–∏—Å–æ–∫')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('unsubscribe_case_'))
    def unsubscribe_callback(call: CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø–∏—Å–∫—É –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–ª–∞.
        """
        subscription_id = int(call.data.split('_')[-1])

        try:
            repos['subscription'].delete(subscription_id)
            bot.answer_callback_query(call.id, text='‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –¥–µ–ª–∞')
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text='–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞'
            )
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {e}')
            bot.answer_callback_query(call.id, text='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('unsubscribe_page_'))
    def paginate(call: CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–µ–ª.
        """
        user_id = call.message.chat.id
        page_number = int(call.data.split('_')[-1])

        user_subscription = pagination_state[user_id]['subscriptions']
        pagination_state[user_id]['current_page'] = page_number

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ª–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:',
            reply_markup=generate_paginated_case_buttons(user_subscription, 'unsubscribe', page_number)
        )

    @bot.callback_query_handler(func=lambda call: call.data == 'cancel')
    def cancel_callback(call: CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞".
        """
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=cases_menu())
