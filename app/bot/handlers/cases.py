from telebot.types import Message
from app.bot.keyboards import cases_menu, cancel_menu
from app.bot.utils import is_valid_url
from app.parser.parser import CasePageParse


def register_cases_handler(bot, repos, logger):
	@bot.message_handler(func=lambda msg: msg.text == 'üìã –ú–æ–∏ –¥–µ–ª–∞')

	def my_cases(message: Message):
		bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=cases_menu())

	@bot.message_handler(func=lambda msg: msg.text == 'üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–µ–ª–æ')
	def subscribe_to_case(message: Message):
		bot.reply_to(
			message,
			(
				"üìù <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—É–¥–µ–±–Ω–æ–µ –¥–µ–ª–æ</b>\n\n"
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –í–∞—Å –¥–µ–ª–æ.\n\n"
				"üîó –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>http://</code> –∏–ª–∏ <code>https://</code> –∏ –≤–µ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å—É–¥–∞\n"
				"–ù–∞–ø—Ä–∏–º–µ—Ä: <i>https://sudrf.ru/...</i>\n\n"
				"‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û—Ç–º–µ–Ω–∞</b> –Ω–∏–∂–µ."
			),
			parse_mode='HTML',
			reply_markup=cancel_menu()
		)
		bot.register_next_step_handler(message, wait_for_case_link)

	def wait_for_case_link(message: Message):
		if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
			bot.send_message(
				message.chat.id,
				"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –¥–µ–ª–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.",
				reply_markup=cases_menu()
			)
			return

		url = message.text.strip()
		if not is_valid_url(url):
			bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
			bot.register_next_step_handler(message, wait_for_case_link)
			return

		try:
			user = repos['user'].get_by_tg_id(message.chat.id)
			case = repos['case'].get_by_url(url)

			if case:
				if repos['subscription'].get_by_user_and_case(user.id, case.id):
					bot.send_message(
						message.chat.id,
						"üîî –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –¥–µ–ª–æ. –ú—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º —É–≤–µ–¥–æ–º–ª—è—Ç—å –í–∞—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.",
						reply_markup=cases_menu()
					)
					return
			else:
				bot.send_message(message.chat.id, 'üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
				parser = CasePageParse(url=url, logger=logger)
				data = parser.get_case_data()

				judge = repos['judge'].get_by_name(data['judge']) or repos['judge'].create(data['judge'])
				court = repos['court'].get_by_name(data['court']) or repos['court'].create(data['court'])

				categories = []
				for name in map(str.strip, data['categories'].split('‚Üí')):
					category = repos['category'].get_category_by_name(name) or repos['category'].create(name)
					categories.append(category)

				case = repos['case'].create(
					number=data['number'],
					unique_identifier=data['unique_identifier'],
					judge=judge,
					date_of_receipt=data['date_of_receipt'],
					url=url,
					court=court,
					categories=categories
				)

			if not repos['subscription'].get_by_user_and_case(user.id, case.id):
				repos['subscription'].create(user.id, case.id)

			bot.send_message(message.chat.id,
							 "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –ú—ã –±—É–¥–µ–º —É–≤–µ–¥–æ–º–ª—è—Ç—å –í–∞—Å –æ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø–æ –¥–µ–ª—É.",
							 reply_markup=cases_menu()
							 )

		except Exception as e:
			logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}')
			bot.send_message(
				message.chat.id,
				'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
				reply_markup=cases_menu()
			)
