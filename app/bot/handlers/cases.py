from app.bot.keyboards import cases_menu, cancel_menu
from app.bot.utils import is_valid_url
from app.parser.parser import CasePageParse


def register_cases_handler(bot, repos, logger):
	@bot.message_handler(func=lambda message: message.text == 'üìã –ú–æ–∏ –¥–µ–ª–∞')

	def my_cases(message):
		bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=cases_menu())

	@bot.message_handler(func=lambda message: message.text == 'üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–µ–ª–æ')
	def subscribe_to_case(message):
		bot.reply_to(
			message, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–µ–ª–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.\n\n"
					 "üîó –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http –∏–ª–∏ https –∏ "
					 ""
					 "–≤–µ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å—É–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://sudrf.ru/...)\n\n"
					 "‚ùå –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>.",
			parse_mode='HTML',
			reply_markup=cancel_menu()
		)

		bot.register_next_step_handler(message, wait_for_case_link)

	def wait_for_case_link(message):
		if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
			bot.send_message(
				message.chat.id,
				"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–µ–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
				reply_markup=cases_menu()
			)
			return
		url = message.text
		url_valid = is_valid_url(message.text)
		if not url_valid:
			bot.reply_to(message, "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
			bot.register_next_step_handler(message, wait_for_case_link)
			return

		try:
			user = repos['user'].get_by_tg_id(message.chat.id)
			case = repos['case'].get_by_url(url)

			if case:
				existing_subscription = repos['subscription'].get_by_user_and_case(user.id, case.id)
				if existing_subscription:
					bot.send_message(
						message.chat.id,
						"üîî –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –¥–µ–ª–æ.",
						reply_markup=cases_menu()
					)
					return
			else:
				bot.send_message(message.chat.id, 'üîç –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ...')
				parser_url = CasePageParse(url=url, logger=logger)
				parser_data = parser_url.get_case_data()

				# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–¥—å–∏ –≤ –±–¥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ
				judge = repos['judge'].get_by_name(parser_data['judge'])
				if not judge:
					judge = repos['judge'].create(parser_data['judge'])

				# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–¥–∞ –≤ –±–¥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ
				court = repos['court'].get_by_name(parser_data['court'])
				if not court:
					court = repos['court'].create(parser_data['court'])

				# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–µ–ª–∞ –≤ –±–¥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ
				categories = []
				for name in parser_data['categories'].split('‚Üí'):
					name = name.strip()
					category = repos['category'].get_category_by_name(name)
					if not category:
						category = repos['category'].create(name)
					categories.append(category)

				# –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–∞
				case = repos['case'].create(
					number=parser_data['number'],
					unique_identifier=parser_data['unique_identifier'],
					judge=judge,
					date_of_receipt=parser_data['date_of_receipt'],
					url=url,
					court=court,
					categories=categories
				)
			# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–µ–ª–æ
			subscription = repos['subscription'].get_by_user_and_case(user.id, case.id)
			if not subscription:
				subscription = repos['subscription'].create(user.id, case.id)

			bot.send_message(message.chat.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–µ–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!", reply_markup=cases_menu())


		except Exception as e:
			logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}')
			bot.send_message(
				message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
				parse_mode='HTML',
				reply_markup=cases_menu()
			)
