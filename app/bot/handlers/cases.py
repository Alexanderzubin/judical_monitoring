import logging

from telebot.types import Message, CallbackQuery

from app.bot import bot
from app.bot.constants import SUBSCRIPTIONS_PER_PAGE
from app.bot.keyboards import cases_menu, cancel_menu, generate_paginated_case_buttons
from app.bot.utils import is_valid_url
from app.database.session import Session
from app.services.cases import CaseService
from app.services.subscriptions import SubscriptionService
from app.services.users import UserService

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
_pagination_state = {}


@bot.message_handler(func=lambda msg: msg.text == 'üìã –ú–æ–∏ –¥–µ–ª–∞')
def my_cases(message: Message):
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=cases_menu())


def wait_for_case_link(message: Message) -> None:
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(
            chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=cases_menu()
        )
        return

    url = message.text.strip()
    if not is_valid_url(url):
        bot.reply_to(
            message,
            '‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.',
        )
        bot.register_next_step_handler(message, wait_for_case_link)
        return

    with Session() as session:
        try:
            user_service = UserService.get_service(session)
            case_service = CaseService.get_service(session)
            subscription_service = SubscriptionService.get_service(session)

            user = user_service.find_user_by_telegram_id(message.chat.id)
            case = case_service.get_case_by_url(url)
            is_new_case = case is None

            if is_new_case:
                bot.send_message(
                    message.chat.id, 'üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'
                )
                case, created = case_service.get_or_create_case(url)
                is_new_case = created

            if not is_new_case:
                if subscription_service.is_user_subscribed_to_case(user, case):
                    bot.send_message(
                        message.chat.id,
                        'üîî –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –¥–µ–ª–æ. –ú—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º —É–≤–µ–¥–æ–º–ª—è—Ç—å –í–∞—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.',
                        reply_markup=cases_menu(),
                    )
                    return

            subscription_service.subscribe_user(user, case)
            bot.send_message(
                message.chat.id,
                '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –ú—ã –±—É–¥–µ–º —É–≤–µ–¥–æ–º–ª—è—Ç—å –í–∞—Å –æ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø–æ –¥–µ–ª—É.',
                reply_markup=cases_menu(),
            )
        except Exception as exc:
            logger.exception('Error during subscription', exc_info=exc)
            bot.send_message(
                message.chat.id,
                '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                reply_markup=cases_menu(),
            )


@bot.message_handler(func=lambda msg: msg.text == 'üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–µ–ª–æ')
def subscribe_to_case(message: Message) -> None:
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot.send_message(
        message.chat.id,
        (
            'üìù <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—É–¥–µ–±–Ω–æ–µ –¥–µ–ª–æ</b>\n\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –í–∞—Å –¥–µ–ª–æ.\n\n'
            'üîó –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>http://</code> –∏–ª–∏ <code>https://</code> –∏ –≤–µ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å—É–¥–∞\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: <i>https://sudrf.ru/...</i>'
        ),
        parse_mode='HTML',
        reply_markup=cancel_menu(),
    )
    bot.register_next_step_handler(message, wait_for_case_link)


@bot.message_handler(func=lambda message: message.text == 'üìë –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –¥–µ–ª')
def my_list_cases(message: Message):
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    current_page = 0

    with Session() as session:
        try:
            user_service = UserService.get_service(session)
            user = user_service.find_user_by_telegram_id(message.chat.id)

            subscription_service = SubscriptionService.get_service(session)
            total_subscriptions_count = subscription_service.get_user_subscriptions_count(user)

            if not total_subscriptions_count:
                bot.send_message(message.chat.id, '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫', reply_markup=cases_menu())
                return

            user_subscriptions = subscription_service.get_user_subscriptions(
                user,
                limit=SUBSCRIPTIONS_PER_PAGE,
                offset=current_page,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            _pagination_state[message.chat.id] = {'current_page': current_page}

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
                reply_markup=generate_paginated_case_buttons(
                    subscriptions_page=user_subscriptions,
                    prefix='list',
                    page_number=current_page,
                    items_per_page=SUBSCRIPTIONS_PER_PAGE,
                    total_subscriptions_count=total_subscriptions_count,
                ),
            )

        except Exception as exc:
            logger.exception('Error during list cases', exc_info=exc)
            bot.send_message(
                message.chat.id,
                '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                reply_markup=cases_menu(),
            )


@bot.callback_query_handler(func=lambda call: call.data.startswith('list_page_'))
def handle_pagination(call: CallbackQuery):
    with Session() as session:
        try:
            current_page = int(call.data.split('_')[-1])

            user_service = UserService.get_service(session)
            subscription_service = SubscriptionService.get_service(session)

            user = user_service.find_user_by_telegram_id(call.message.chat.id)
            user_subscriptions = subscription_service.get_user_subscriptions(
                user,
                limit=SUBSCRIPTIONS_PER_PAGE,
                offset=current_page,
            )
            total_subscriptions_count = subscription_service.get_user_subscriptions_count(user)

            state = _pagination_state.get(call.message.chat.id)

            if not state:
                bot.answer_callback_query(call.id, '‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
                return

            state['current_page'] = current_page
            markup = generate_paginated_case_buttons(
                subscriptions_page=user_subscriptions,
                prefix='list',
                page_number=current_page,
                items_per_page=SUBSCRIPTIONS_PER_PAGE,
                total_subscriptions_count=total_subscriptions_count,
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup,
            )
            bot.answer_callback_query(call.id)

        except Exception as exc:
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏', exc_info=exc)
            bot.answer_callback_query(call.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É')


@bot.callback_query_handler(func=lambda call: call.data.startswith('list_case_'))
def open_case_details(call: CallbackQuery):
    with Session() as session:
        try:
            UserService.get_service(session)
            subscription_service = SubscriptionService.get_service(session)

            subscription_id = int(call.data.split('_')[-1])
            subscription = subscription_service.find_subscription_by_id(subscription_id)
            case = subscription.case

            case_text = (
                f'<b>üìÑ –ù–æ–º–µ—Ä –¥–µ–ª–∞:</b> <code>{case.number}</code>\n'
                f'<b>üèõ –°—É–¥:</b> {case.court.name if case.court else "<i>–ù–µ —É–∫–∞–∑–∞–Ω</i>"}\n'
                f'<b>üë®‚Äç‚öñ –°—É–¥—å—è:</b> {case.judge.name if case.judge else "<i>–ù–µ —É–∫–∞–∑–∞–Ω</i>"}\n'
                f'<b>üìÖ –î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:</b> <code>{case.date_of_receipt.strftime("%d.%m.%Y")}</code>\n\n'
                f"<a href='{case.url}'>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ–ª–æ</a>"
            )

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –¥–µ–ª–∞
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=case_text,
                parse_mode='HTML',
            )
            bot.answer_callback_query(call.id)

        except Exception as exc:
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–µ–ª–∞', exc_info=exc)
            bot.answer_callback_query(call.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–µ–ª–∞')
